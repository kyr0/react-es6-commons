{"version":3,"names":[],"mappings":"","sources":["Router.js"],"sourcesContent":["import Router from 'routes';\nimport $ from 'jquery';\nimport EventBus from './event/Bus';\n\nvar _router = Router();\n\nclass RouterImpl {\n\n    routeHandlers = [];\n\n    constructor() {\n\n        // auto-match on hash change\n        $(window).on('hashchange', () => {\n\n            this.cleanup();\n            this.match();\n        });\n    }\n\n    cleanup() {\n\n        // reset flags\n        for (var i=0; i<this.routeHandlers.length; i++) {\n            delete this.routeHandlers[i].hasBeenRouted;\n        }\n    }\n\n    add(route, instance) {\n\n        if (!instance.onRouteMatch) {\n            instance.onRouteMatch = function() {};\n        }\n\n        // scope binding\n        instance.onRouteMatch = instance.onRouteMatch.bind(instance);\n\n        _router.addRoute(route, instance.onRouteMatch);\n\n        // register in stack\n        this.routeHandlers.push(instance.onRouteMatch);\n    }\n\n    match() {\n\n        var hash = document.location.hash;\n        var hasBeenRouted = false;\n        if (hash == '') hash = '#';\n\n        var match = _router.match(hash);\n\n        if (match && match.fn && typeof match.fn == 'function') {\n\n            // call only once, even if multiple routes are\n            // matching the same instance and are matched\n            // at different times...\n            for (var i=0; i<this.routeHandlers.length; i++) {\n\n                if (this.routeHandlers[i] ===  match.fn &&\n                    this.routeHandlers[i].hasBeenRouted) {\n                    hasBeenRouted = true;\n                }\n            }\n\n            if (!hasBeenRouted) {\n\n                match.fn(hash);\n                match.fn.hasBeenRouted = true;\n            }\n        }\n    }\n}\nglobal.router = new RouterImpl();\nexport default router;"],"file":"Router.js","sourceRoot":"/Users/aronhomberg/Source/ONPEX-Idea/react-es6-commons-github/src"}